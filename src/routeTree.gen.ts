/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SiteImport } from './routes/_site'
import { Route as AuthImport } from './routes/_auth'
import { Route as SiteIndexImport } from './routes/_site/index'
import { Route as AuthRegisterImport } from './routes/_auth/register'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as SiteLessonsIndexImport } from './routes/_site/lessons/index'
import { Route as SiteLessonsLessonIndexImport } from './routes/_site/lessons/$lesson/index'
import { Route as SiteLessonsLessonPlayImport } from './routes/_site/lessons/$lesson/play'

// Create/Update Routes

const SiteRoute = SiteImport.update({
  id: '/_site',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const SiteIndexRoute = SiteIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SiteRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const SiteLessonsIndexRoute = SiteLessonsIndexImport.update({
  id: '/lessons/',
  path: '/lessons/',
  getParentRoute: () => SiteRoute,
} as any)

const SiteLessonsLessonIndexRoute = SiteLessonsLessonIndexImport.update({
  id: '/lessons/$lesson/',
  path: '/lessons/$lesson/',
  getParentRoute: () => SiteRoute,
} as any)

const SiteLessonsLessonPlayRoute = SiteLessonsLessonPlayImport.update({
  id: '/lessons/$lesson/play',
  path: '/lessons/$lesson/play',
  getParentRoute: () => SiteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_site': {
      id: '/_site'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SiteImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof AuthImport
    }
    '/_site/': {
      id: '/_site/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof SiteIndexImport
      parentRoute: typeof SiteImport
    }
    '/_site/lessons/': {
      id: '/_site/lessons/'
      path: '/lessons'
      fullPath: '/lessons'
      preLoaderRoute: typeof SiteLessonsIndexImport
      parentRoute: typeof SiteImport
    }
    '/_site/lessons/$lesson/play': {
      id: '/_site/lessons/$lesson/play'
      path: '/lessons/$lesson/play'
      fullPath: '/lessons/$lesson/play'
      preLoaderRoute: typeof SiteLessonsLessonPlayImport
      parentRoute: typeof SiteImport
    }
    '/_site/lessons/$lesson/': {
      id: '/_site/lessons/$lesson/'
      path: '/lessons/$lesson'
      fullPath: '/lessons/$lesson'
      preLoaderRoute: typeof SiteLessonsLessonIndexImport
      parentRoute: typeof SiteImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface SiteRouteChildren {
  SiteIndexRoute: typeof SiteIndexRoute
  SiteLessonsIndexRoute: typeof SiteLessonsIndexRoute
  SiteLessonsLessonPlayRoute: typeof SiteLessonsLessonPlayRoute
  SiteLessonsLessonIndexRoute: typeof SiteLessonsLessonIndexRoute
}

const SiteRouteChildren: SiteRouteChildren = {
  SiteIndexRoute: SiteIndexRoute,
  SiteLessonsIndexRoute: SiteLessonsIndexRoute,
  SiteLessonsLessonPlayRoute: SiteLessonsLessonPlayRoute,
  SiteLessonsLessonIndexRoute: SiteLessonsLessonIndexRoute,
}

const SiteRouteWithChildren = SiteRoute._addFileChildren(SiteRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof SiteRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/': typeof SiteIndexRoute
  '/lessons': typeof SiteLessonsIndexRoute
  '/lessons/$lesson/play': typeof SiteLessonsLessonPlayRoute
  '/lessons/$lesson': typeof SiteLessonsLessonIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/': typeof SiteIndexRoute
  '/lessons': typeof SiteLessonsIndexRoute
  '/lessons/$lesson/play': typeof SiteLessonsLessonPlayRoute
  '/lessons/$lesson': typeof SiteLessonsLessonIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_site': typeof SiteRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_site/': typeof SiteIndexRoute
  '/_site/lessons/': typeof SiteLessonsIndexRoute
  '/_site/lessons/$lesson/play': typeof SiteLessonsLessonPlayRoute
  '/_site/lessons/$lesson/': typeof SiteLessonsLessonIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/register'
    | '/'
    | '/lessons'
    | '/lessons/$lesson/play'
    | '/lessons/$lesson'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/login'
    | '/register'
    | '/'
    | '/lessons'
    | '/lessons/$lesson/play'
    | '/lessons/$lesson'
  id:
    | '__root__'
    | '/_auth'
    | '/_site'
    | '/_auth/login'
    | '/_auth/register'
    | '/_site/'
    | '/_site/lessons/'
    | '/_site/lessons/$lesson/play'
    | '/_site/lessons/$lesson/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  SiteRoute: typeof SiteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  SiteRoute: SiteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_site"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login",
        "/_auth/register"
      ]
    },
    "/_site": {
      "filePath": "_site.tsx",
      "children": [
        "/_site/",
        "/_site/lessons/",
        "/_site/lessons/$lesson/play",
        "/_site/lessons/$lesson/"
      ]
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/register": {
      "filePath": "_auth/register.tsx",
      "parent": "/_auth"
    },
    "/_site/": {
      "filePath": "_site/index.tsx",
      "parent": "/_site"
    },
    "/_site/lessons/": {
      "filePath": "_site/lessons/index.tsx",
      "parent": "/_site"
    },
    "/_site/lessons/$lesson/play": {
      "filePath": "_site/lessons/$lesson/play.tsx",
      "parent": "/_site"
    },
    "/_site/lessons/$lesson/": {
      "filePath": "_site/lessons/$lesson/index.tsx",
      "parent": "/_site"
    }
  }
}
ROUTE_MANIFEST_END */
